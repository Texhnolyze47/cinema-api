// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: peliculas.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO peliculas (codigo,nombre, clasificacion_edad)
VALUES ($1, $2, $3)
RETURNING codigo, nombre, clasificacion_edad
`

type CreateMovieParams struct {
	Codigo            uuid.UUID
	Nombre            string
	ClasificacionEdad int32
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Pelicula, error) {
	row := q.db.QueryRowContext(ctx, createMovie, arg.Codigo, arg.Nombre, arg.ClasificacionEdad)
	var i Pelicula
	err := row.Scan(&i.Codigo, &i.Nombre, &i.ClasificacionEdad)
	return i, err
}

const selectInfoPeliculas = `-- name: SelectInfoPeliculas :many
SELECT p.nombre as "Nombre película", p.clasificacion_edad as "Calificación edad"
FROM peliculas p
LEFT JOIN salas s ON p.codigo = s.pelicula
WHERE s.codigo IS NULL
`

type SelectInfoPeliculasRow struct {
	NombrePelícula   string
	CalificaciónEdad int32
}

func (q *Queries) SelectInfoPeliculas(ctx context.Context) ([]SelectInfoPeliculasRow, error) {
	rows, err := q.db.QueryContext(ctx, selectInfoPeliculas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectInfoPeliculasRow
	for rows.Next() {
		var i SelectInfoPeliculasRow
		if err := rows.Scan(&i.NombrePelícula, &i.CalificaciónEdad); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectInfoSalas = `-- name: SelectInfoSalas :many
SELECT
    s.codigo,
    s.nombre,
    p.codigo AS "Código película",
    p.nombre AS "Nombre película",
    p.clasificacion_edad AS "Calificación edad"
FROM Salas s
LEFT JOIN Peliculas p ON p.codigo = s.Pelicula
`

type SelectInfoSalasRow struct {
	Codigo           uuid.UUID
	Nombre           string
	CódigoPelícula   uuid.NullUUID
	NombrePelícula   sql.NullString
	CalificaciónEdad sql.NullInt32
}

func (q *Queries) SelectInfoSalas(ctx context.Context) ([]SelectInfoSalasRow, error) {
	rows, err := q.db.QueryContext(ctx, selectInfoSalas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectInfoSalasRow
	for rows.Next() {
		var i SelectInfoSalasRow
		if err := rows.Scan(
			&i.Codigo,
			&i.Nombre,
			&i.CódigoPelícula,
			&i.NombrePelícula,
			&i.CalificaciónEdad,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectNombrePeliculas = `-- name: SelectNombrePeliculas :many
SELECT nombre
FROM peliculas
`

func (q *Queries) SelectNombrePeliculas(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, selectNombrePeliculas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var nombre string
		if err := rows.Scan(&nombre); err != nil {
			return nil, err
		}
		items = append(items, nombre)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectNombrePeliculasSinSala = `-- name: SelectNombrePeliculasSinSala :many
SELECT nombre
FROM peliculas
WHERE NOT EXISTS (
    SELECT codigo, nombre, pelicula
    FROM salas
    WHERE salas.pelicula = peliculas.codigo
)
`

func (q *Queries) SelectNombrePeliculasSinSala(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, selectNombrePeliculasSinSala)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var nombre string
		if err := rows.Scan(&nombre); err != nil {
			return nil, err
		}
		items = append(items, nombre)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectPeliculasClasificacion = `-- name: SelectPeliculasClasificacion :many
SELECT DISTINCT clasificacion_edad
FROM peliculas
`

func (q *Queries) SelectPeliculasClasificacion(ctx context.Context) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, selectPeliculasClasificacion)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var clasificacion_edad int32
		if err := rows.Scan(&clasificacion_edad); err != nil {
			return nil, err
		}
		items = append(items, clasificacion_edad)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectPeliculasSinCalificacion = `-- name: SelectPeliculasSinCalificacion :many
SELECT nombre
FROM peliculas
WHERE clasificacion_edad IS NULL OR clasificacion_edad = 0
`

func (q *Queries) SelectPeliculasSinCalificacion(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, selectPeliculasSinCalificacion)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var nombre string
		if err := rows.Scan(&nombre); err != nil {
			return nil, err
		}
		items = append(items, nombre)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectSalasSinPelicula = `-- name: SelectSalasSinPelicula :many
SELECT nombre
FROM salas
WHERE NOT EXISTS (
    SELECT codigo, nombre, clasificacion_edad
    FROM peliculas
    WHERE peliculas.codigo = salas.codigo
)
`

func (q *Queries) SelectSalasSinPelicula(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, selectSalasSinPelicula)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var nombre string
		if err := rows.Scan(&nombre); err != nil {
			return nil, err
		}
		items = append(items, nombre)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
